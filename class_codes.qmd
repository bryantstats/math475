---
title: "Untitled"
format: html
editor: visual
---

## Time series with trend and seasonal

```{r}

# white-noise
y = rnorm(100) 
yt = ts(y)
plot(yt)


# with trend
y = rnorm(100) + c(1:100)

yt = ts(y)
plot(yt)


# with seasonal
y = rnorm(100) + 5*sin(1:100)

yt = ts(y)
plot(yt)

# with trend and seasonal
y = 3*rnorm(100) + 1*c(1:100) + 10*sin(1:100)

yt = ts(y)
plot(yt)
```


## Auto-regressive Models

```{r}
library(ggfortify)
set.seed(2023)
n = 100000
y = rep(0, n)
y[1] = 0
b0 = 0
b1 = 1.0001
e = rnorm(n, sd = 1)
for (t in 2:n)
{
  y[t] = b0 + b1*y[t-1]+e[t]
}
autoplot(ts(y)) + ggtitle(paste0("An Autoregressive series with beta1 = ",b1))

```


```{r}
# install.packages("quantmod")
library(quantmod)
library(forecast)
getSymbols("AAPL")
yt = AAPL$AAPL.Open
yt <- yt[index(yt) > "2023-01-01"]
```

```{r}
plot(yt)
```


```{r}
d_AAPL = ts(as.numeric(diff(yt))[-1])
plot(d_AAPL)
```

# AR(p) and PACF

```{r}
yt <- arima.sim(list(order=c(4,0,0), ar=c(.1, .3, .2, .2)), n=10000)
b0 = 10
yt <- yt + b0
plot(yt)
pacf(yt)

```



```{r}
yt <- arima.sim(list(order=c(5,0,0), ar=c(.1, .3, .2, .1, .1)), n=10000)
b0 = 10
yt <- yt + b0
plot(yt)
pacf(yt)

```


## MA Models

### MA (1)

```{r}
set.seed(2026)
yt <- arima.sim(list(order=c(0,0,1), ma=c(.1)), n=100)
b0 = 10
yt <- yt + b0
plot(yt)
acf(yt)
```


### AR(1)

```{r}
set.seed(2026)
yt <- arima.sim(list(order=c(1,0,0), ar=c(.8)), n=100)
b0 = 10
yt <- yt + b0
plot(yt)
acf(yt)
```

```{r}
# import the data
df = read.csv('https://bryantstats.github.io/math475/data/inflation.csv')
# define the series
yt = ts(df$pai1, frequency = 12, start = c(1950, 2))
# check for stationary
par(mfrow = c(1, 2))
plot(yt)
acf(yt)

```



## ARIMA Models

### No I

```{r}
set.seed(2025)
y = arima.sim(list(order=c(1,0,2), ar=c(.1), ma = c(.1, .4)), n=100)
plot(y)
```

### Has I

i = 1 means we need to do differencing one time to obtain a stationary series. 

```{r}
set.seed(2025)
# i = 3
yt = arima.sim(list(order=c(1,3,2), ar=c(.1), ma = c(.1, .4)), n=100)
plot(yt)
```


```{r}
plot(yt)

y_d = diff(yt)
plot(y_d)

y_d2 = diff(y_d)
plot(y_d2)

y_d3 = diff(y_d2)
plot(y_d3)
```

